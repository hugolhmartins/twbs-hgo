export declare enum EEventEmitterStatus {
    CANCELED = 0,
}
export interface IEventSubscribe {
    ref: string;
    cancel?: Function;
}
export interface IEventEmitterError {
    error: string;
    status: EEventEmitterStatus;
}
export interface IConfigEmitter {
}
export declare class EventInsc implements IEventSubscribe {
    ref: string;
    private eventInst;
    constructor(refid: string, peventEmitter: EventEmitter<any, any>);
    cancel(): void;
}
export declare class EventEmitter<GEmitType, GErrorType = string, GResolveType = any> {
    private _events;
    private _next_iterator;
    private _cancel_next;
    private _lastvalue;
    private config;
    constructor(config?: IConfigEmitter);
    readonly emittedValue: GEmitType;
    error(err: GErrorType): void;
    emit(value: GEmitType): GResolveType[];
    private next(value);
    private getRefId();
    subscribe(handlerSucess: (value: GEmitType) => any, handlerError?: (value: GErrorType) => any): IEventSubscribe;
    once(handlerSucess: (value: GEmitType) => any, handlerError?: (value: GErrorType) => any): IEventSubscribe;
    hasSubscribers(): boolean;
    unsubscribeAll(): void;
    cancel(): void;
    unsubscribe(subscribe: IEventSubscribe): void;
}
