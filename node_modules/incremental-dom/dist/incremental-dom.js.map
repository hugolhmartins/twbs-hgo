{"version":3,"file":"incremental-dom.js","sources":["src/util.js","src/node_data.js","src/nodes.js","src/notifications.js","src/context.js","src/dom_util.js","src/core.js","src/symbols.js","src/attributes.js","src/virtual_elements.js"],"sourcesContent":["/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A cached reference to the hasOwnProperty function.\n */\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n\n/**\n * A constructor function that will create blank objects.\n * @constructor\n */\nfunction Blank() {}\n\nBlank.prototype = Object.create(null);\n\n\n/**\n * Used to prevent property collisions between our \"map\" and its prototype.\n * @param {!Object<string, *>} map The map to check.\n * @param {string} property The property to check.\n * @return {boolean} Whether map has property.\n */\nconst has = function(map, property) {\n  return hasOwnProperty.call(map, property);\n};\n\n\n/**\n * Creates an map object without a prototype.\n * @return {!Object}\n */\nconst createMap = function() {\n  return new Blank();\n};\n\n\n/** */\nexport {\n  createMap,\n  has\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createMap } from './util';\n\n\n/**\n * Keeps track of information needed to perform diffs for a given DOM node.\n * @param {!string} nodeName\n * @param {?string=} key\n * @constructor\n */\nfunction NodeData(nodeName, key) {\n  /**\n   * The attributes and their values.\n   * @const {!Object<string, *>}\n   */\n  this.attrs = createMap();\n\n  /**\n   * An array of attribute name/value pairs, used for quickly diffing the\n   * incomming attributes to see if the DOM node's attributes need to be\n   * updated.\n   * @const {Array<*>}\n   */\n  this.attrsArr = [];\n\n  /**\n   * The incoming attributes for this Node, before they are updated.\n   * @const {!Object<string, *>}\n   */\n  this.newAttrs = createMap();\n\n  /**\n   * Whether or not the statics have been applied for the node yet.\n   * {boolean}\n   */\n  this.staticsApplied = false;\n\n  /**\n   * The key used to identify this node, used to preserve DOM nodes when they\n   * move within their parent.\n   * @const\n   */\n  this.key = key;\n\n  /**\n   * Keeps track of children within this node by their key.\n   * {!Object<string, !Element>}\n   */\n  this.keyMap = createMap();\n\n  /**\n   * Whether or not the keyMap is currently valid.\n   * @type {boolean}\n   */\n  this.keyMapValid = true;\n\n  /**\n   * Whether or the associated node is, or contains, a focused Element.\n   * @type {boolean}\n   */\n  this.focused = false;\n\n  /**\n   * The node name for this node.\n   * @const {string}\n   */\n  this.nodeName = nodeName;\n\n  /**\n   * @type {?string}\n   */\n  this.text = null;\n}\n\n\n/**\n * Initializes a NodeData object for a Node.\n *\n * @param {Node} node The node to initialize data for.\n * @param {string} nodeName The node name of node.\n * @param {?string=} key The key that identifies the node.\n * @return {!NodeData} The newly initialized data object\n */\nconst initData = function(node, nodeName, key) {\n  const data = new NodeData(nodeName, key);\n  node['__incrementalDOMData'] = data;\n  return data;\n};\n\n\n/**\n * Retrieves the NodeData object for a Node, creating it if necessary.\n *\n * @param {?Node} node The Node to retrieve the data for.\n * @return {!NodeData} The NodeData for this Node.\n */\nconst getData = function(node) {\n  importNode(node);\n  return node['__incrementalDOMData'];\n};\n\n\n/**\n * Imports node and its subtree, initializing caches.\n *\n * @param {?Node} node The Node to import.\n */\nconst importNode = function(node) {\n  if (node['__incrementalDOMData']) {\n    return;\n  }\n\n  const isElement = node instanceof Element;\n  const nodeName = isElement ? node.localName : node.nodeName;\n  const key = isElement ? node.getAttribute('key') : null;\n  const data = initData(node, nodeName, key);\n\n  if (key) {\n    getData(node.parentNode).keyMap[key] = node;\n  }\n\n  if (isElement) {\n    const attributes = node.attributes;\n    const attrs = data.attrs;\n    const newAttrs = data.newAttrs;\n    const attrsArr = data.attrsArr;\n\n    for (let i = 0; i < attributes.length; i += 1) {\n      const attr = attributes[i];\n      const name = attr.name;\n      const value = attr.value;\n\n      attrs[name] = value;\n      newAttrs[name] = undefined;\n      attrsArr.push(name);\n      attrsArr.push(value);\n    }\n  }\n\n  for (let child = node.firstChild; child; child = child.nextSibling) {\n    importNode(child);\n  }\n};\n\n\n/** */\nexport {\n  getData,\n  initData,\n  importNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n    getData,\n    initData\n} from './node_data';\n\n\n/**\n * Gets the namespace to create an element (of a given tag) in.\n * @param {string} tag The tag to get the namespace for.\n * @param {?Node} parent\n * @return {?string} The namespace to create the tag in.\n */\nconst getNamespaceForTag = function(tag, parent) {\n  if (tag === 'svg') {\n    return 'http://www.w3.org/2000/svg';\n  }\n\n  if (getData(parent).nodeName === 'foreignObject') {\n    return null;\n  }\n\n  return parent.namespaceURI;\n};\n\n\n/**\n * Creates an Element.\n * @param {Document} doc The document with which to create the Element.\n * @param {?Node} parent\n * @param {string} tag The tag for the Element.\n * @param {?string=} key A key to identify the Element.\n * @return {!Element}\n */\nconst createElement = function(doc, parent, tag, key) {\n  const namespace = getNamespaceForTag(tag, parent);\n  let el;\n\n  if (namespace) {\n    el = doc.createElementNS(namespace, tag);\n  } else {\n    el = doc.createElement(tag);\n  }\n\n  initData(el, tag, key);\n\n  return el;\n};\n\n\n/**\n * Creates a Text Node.\n * @param {Document} doc The document with which to create the Element.\n * @return {!Text}\n */\nconst createText = function(doc) {\n  const node = doc.createTextNode('');\n  initData(node, '#text', null);\n  return node;\n};\n\n\n/** */\nexport {\n  createElement,\n  createText\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nconst notifications = {\n  /**\n   * Called after patch has compleated with any Nodes that have been created\n   * and added to the DOM.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesCreated: null,\n\n  /**\n   * Called after patch has compleated with any Nodes that have been removed\n   * from the DOM.\n   * Note it's an applications responsibility to handle any childNodes.\n   * @type {?function(Array<!Node>)}\n   */\n  nodesDeleted: null\n};\n\nexport {\n  notifications\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { notifications } from './notifications';\n\n\n/**\n * Keeps track of the state of a patch.\n * @constructor\n */\nfunction Context() {\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.created = notifications.nodesCreated && [];\n\n  /**\n   * @type {(Array<!Node>|undefined)}\n   */\n  this.deleted = notifications.nodesDeleted && [];\n}\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markCreated = function(node) {\n  if (this.created) {\n    this.created.push(node);\n  }\n};\n\n\n/**\n * @param {!Node} node\n */\nContext.prototype.markDeleted = function(node) {\n  if (this.deleted) {\n    this.deleted.push(node);\n  }\n};\n\n\n/**\n * Notifies about nodes that were created during the patch opearation.\n */\nContext.prototype.notifyChanges = function() {\n  if (this.created && this.created.length > 0) {\n    notifications.nodesCreated(this.created);\n  }\n\n  if (this.deleted && this.deleted.length > 0) {\n    notifications.nodesDeleted(this.deleted);\n  }\n};\n\n\n/** */\nexport {\n  Context\n};\n","/**\n * Copyright 2016 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @param {!Node} node\n * @return {boolean} True if the node the root of a document, false otherwise.\n */\nconst isDocumentRoot = function(node) {\n  // For ShadowRoots, check if they are a DocumentFragment instead of if they\n  // are a ShadowRoot so that this can work in 'use strict' if ShadowRoots are\n  // not supported.\n  return node instanceof Document || node instanceof DocumentFragment;\n};\n\n\n/**\n * @param {!Node} node The node to start at, inclusive.\n * @param {?Node} root The root ancestor to get until, exclusive.\n * @return {!Array<!Node>} The ancestry of DOM nodes.\n */\nconst getAncestry = function(node, root) {\n  const ancestry = [];\n  let cur = node;\n\n  while (cur !== root) {\n    ancestry.push(cur);\n    cur = cur.parentNode;\n  }\n\n  return ancestry;\n};\n\n\n/**\n * @param {!Node} node\n * @return {!Node} The root node of the DOM tree that contains node.\n */\nconst getRoot = function(node) {\n  let cur = node;\n  let prev = cur;\n\n  while (cur) {\n    prev = cur;\n    cur = cur.parentNode;\n  }\n\n  return prev;\n};\n\n\n/**\n * @param {!Node} node The node to get the activeElement for.\n * @return {?Element} The activeElement in the Document or ShadowRoot\n *     corresponding to node, if present.\n */\nconst getActiveElement = function(node) {\n  const root = getRoot(node);\n  return isDocumentRoot(root) ? root.activeElement : null;\n};\n\n\n/**\n * Gets the path of nodes that contain the focused node in the same document as\n * a reference node, up until the root.\n * @param {!Node} node The reference node to get the activeElement for.\n * @param {?Node} root The root to get the focused path until.\n * @return {!Array<Node>}\n */\nconst getFocusedPath = function(node, root) {\n  const activeElement = getActiveElement(node);\n\n  if (!activeElement || !node.contains(activeElement)) {\n    return [];\n  }\n\n  return getAncestry(activeElement, root);\n};\n\n\n/**\n * Like insertBefore, but instead instead of moving the desired node, instead\n * moves all the other nodes after.\n * @param {?Node} parentNode\n * @param {!Node} node\n * @param {?Node} referenceNode\n */\nconst moveBefore = function(parentNode, node, referenceNode) {\n  const insertReferenceNode = node.nextSibling;\n  let cur = referenceNode;\n\n  while (cur !== node) {\n    const next = cur.nextSibling;\n    parentNode.insertBefore(cur, insertReferenceNode);\n    cur = next;\n  }\n};\n\n\n/** */\nexport {\n  getFocusedPath,\n  moveBefore\n};\n\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createElement,\n  createText\n} from './nodes';\nimport { getData } from './node_data';\nimport { Context } from './context';\nimport {\n  assertInPatch,\n  assertNoUnclosedTags,\n  assertNotInAttributes,\n  assertVirtualAttributesClosed,\n  assertNoChildrenDeclaredYet,\n  assertPatchElementNoExtras,\n  setInAttributes,\n  setInSkip\n} from './assertions';\nimport {\n  getFocusedPath,\n  moveBefore\n} from './dom_util';\n\n\n/** @type {?Context} */\nlet context = null;\n\n/** @type {?Node} */\nlet currentNode = null;\n\n/** @type {?Node} */\nlet currentParent = null;\n\n/** @type {?Document} */\nlet doc = null;\n\n\n/**\n * @param {!Array<Node>} focusPath The nodes to mark.\n * @param {boolean} focused Whether or not they are focused.\n */\nconst markFocused = function(focusPath, focused) {\n  for (let i = 0; i < focusPath.length; i += 1) {\n    getData(focusPath[i]).focused = focused;\n  }\n};\n\n\n/**\n * Returns a patcher function that sets up and restores a patch context,\n * running the run function with the provided data.\n * @param {function((!Element|!DocumentFragment),!function(T),T=): ?Node} run\n * @return {function((!Element|!DocumentFragment),!function(T),T=): ?Node}\n * @template T\n */\nconst patchFactory = function(run) {\n  /**\n   * TODO(moz): These annotations won't be necessary once we switch to Closure\n   * Compiler's new type inference. Remove these once the switch is done.\n   *\n   * @param {(!Element|!DocumentFragment)} node\n   * @param {!function(T)} fn\n   * @param {T=} data\n   * @return {?Node} node\n   * @template T\n   */\n  const f = function(node, fn, data) {\n    const prevContext = context;\n    const prevDoc = doc;\n    const prevCurrentNode = currentNode;\n    const prevCurrentParent = currentParent;\n    let previousInAttributes = false;\n    let previousInSkip = false;\n\n    context = new Context();\n    doc = node.ownerDocument;\n    currentParent = node.parentNode;\n\n    if (process.env.NODE_ENV !== 'production') {\n      previousInAttributes = setInAttributes(false);\n      previousInSkip = setInSkip(false);\n    }\n\n    const focusPath = getFocusedPath(node, currentParent);\n    markFocused(focusPath, true);\n    const retVal = run(node, fn, data);\n    markFocused(focusPath, false);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assertVirtualAttributesClosed();\n      setInAttributes(previousInAttributes);\n      setInSkip(previousInSkip);\n    }\n\n    context.notifyChanges();\n\n    context = prevContext;\n    doc = prevDoc;\n    currentNode = prevCurrentNode;\n    currentParent = prevCurrentParent;\n\n    return retVal;\n  };\n  return f;\n};\n\n\n/**\n * Patches the document starting at node with the provided function. This\n * function may be called during an existing patch operation.\n * @param {!Element|!DocumentFragment} node The Element or Document\n *     to patch.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {!Node} The patched node.\n * @template T\n */\nconst patchInner = patchFactory(function(node, fn, data) {\n  currentNode = node;\n\n  enterNode();\n  fn(data);\n  exitNode();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoUnclosedTags(currentNode, node);\n  }\n\n  return node;\n});\n\n\n/**\n * Patches an Element with the the provided function. Exactly one top level\n * element call should be made corresponding to `node`.\n * @param {!Element} node The Element where the patch should start.\n * @param {!function(T)} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM. This should have at most one top level\n *     element call.\n * @param {T=} data An argument passed to fn to represent DOM state.\n * @return {?Node} The node if it was updated, its replacedment or null if it\n *     was removed.\n * @template T\n */\nconst patchOuter = patchFactory(function(node, fn, data) {\n  let startNode = /** @type {!Element} */({ nextSibling: node });\n  let expectedNextNode = null;\n  let expectedPrevNode = null;\n\n  if (process.env.NODE_ENV !== 'production') {\n    expectedNextNode = node.nextSibling;\n    expectedPrevNode = node.previousSibling;\n  }\n\n  currentNode = startNode;\n  fn(data);\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertPatchElementNoExtras(startNode, currentNode, expectedNextNode,\n        expectedPrevNode);\n  }\n\n  if (node !== currentNode && node.parentNode) {\n    removeChild(currentParent, node, getData(currentParent).keyMap);\n  }\n\n  return (startNode === currentNode) ? null : currentNode;\n});\n\n\n/**\n * Checks whether or not the current node matches the specified nodeName and\n * key.\n *\n * @param {!Node} matchNode A node to match the data to.\n * @param {?string} nodeName The nodeName for this node.\n * @param {?string=} key An optional key that identifies a node.\n * @return {boolean} True if the node matches, false otherwise.\n */\nconst matches = function(matchNode, nodeName, key) {\n  const data = getData(matchNode);\n\n  // Key check is done using double equals as we want to treat a null key the\n  // same as undefined. This should be okay as the only values allowed are\n  // strings, null and undefined so the == semantics are not too weird.\n  return nodeName === data.nodeName && key == data.key;\n};\n\n\n/**\n * Aligns the virtual Element definition with the actual DOM, moving the\n * corresponding DOM node to the correct location or creating it if necessary.\n * @param {string} nodeName For an Element, this should be a valid tag string.\n *     For a Text, this should be #text.\n * @param {?string=} key The key used to identify this element.\n */\nconst alignWithDOM = function(nodeName, key) {\n  if (currentNode && matches(currentNode, nodeName, key)) {\n    return;\n  }\n\n  const parentData = getData(currentParent);\n  const currentNodeData = currentNode && getData(currentNode);\n  const keyMap = parentData.keyMap;\n  let node;\n\n  // Check to see if the node has moved within the parent.\n  if (key) {\n    const keyNode = keyMap[key];\n    if (keyNode) {\n      if (matches(keyNode, nodeName, key)) {\n        node = keyNode;\n      } else if (keyNode === currentNode) {\n        context.markDeleted(keyNode);\n      } else {\n        removeChild(currentParent, keyNode, keyMap);\n      }\n    }\n  }\n\n  // Create the node if it doesn't exist.\n  if (!node) {\n    if (nodeName === '#text') {\n      node = createText(doc);\n    } else {\n      node = createElement(doc, currentParent, nodeName, key);\n    }\n\n    if (key) {\n      keyMap[key] = node;\n    }\n\n    context.markCreated(node);\n  }\n\n  // Re-order the node into the right position, preserving focus if either\n  // node or currentNode are focused by making sure that they are not detached\n  // from the DOM.\n  if (getData(node).focused) {\n    // Move everything else before the node.\n    moveBefore(currentParent, node, currentNode);\n  } else if (currentNodeData && currentNodeData.key && !currentNodeData.focused) {\n    // Remove the currentNode, which can always be added back since we hold a\n    // reference through the keyMap. This prevents a large number of moves when\n    // a keyed item is removed or moved backwards in the DOM.\n    currentParent.replaceChild(node, currentNode);\n    parentData.keyMapValid = false;\n  } else {\n    currentParent.insertBefore(node, currentNode);\n  }\n\n  currentNode = node;\n};\n\n\n/**\n * @param {?Node} node\n * @param {?Node} child\n * @param {?Object<string, !Element>} keyMap\n */\nconst removeChild = function(node, child, keyMap) {\n  node.removeChild(child);\n  context.markDeleted(/** @type {!Node}*/(child));\n\n  const key = getData(child).key;\n  if (key) {\n    delete keyMap[key];\n  }\n};\n\n\n/**\n * Clears out any unvisited Nodes, as the corresponding virtual element\n * functions were never called for them.\n */\nconst clearUnvisitedDOM = function() {\n  const node = currentParent;\n  const data = getData(node);\n  const keyMap = data.keyMap;\n  const keyMapValid = data.keyMapValid;\n  let child = node.lastChild;\n  let key;\n\n  if (child === currentNode && keyMapValid) {\n    return;\n  }\n\n  while (child !== currentNode) {\n    removeChild(node, child, keyMap);\n    child = node.lastChild;\n  }\n\n  // Clean the keyMap, removing any unusued keys.\n  if (!keyMapValid) {\n    for (key in keyMap) {\n      child = keyMap[key];\n      if (child.parentNode !== node) {\n        context.markDeleted(child);\n        delete keyMap[key];\n      }\n    }\n\n    data.keyMapValid = true;\n  }\n};\n\n\n/**\n * Changes to the first child of the current node.\n */\nconst enterNode = function() {\n  currentParent = currentNode;\n  currentNode = null;\n};\n\n\n/**\n * @return {?Node} The next Node to be patched.\n */\nconst getNextNode = function() {\n  if (currentNode) {\n    return currentNode.nextSibling;\n  } else {\n    return currentParent.firstChild;\n  }\n};\n\n\n/**\n * Changes to the next sibling of the current node.\n */\nconst nextNode = function() {\n  currentNode = getNextNode();\n};\n\n\n/**\n * Changes to the parent of the current node, removing any unvisited children.\n */\nconst exitNode = function() {\n  clearUnvisitedDOM();\n\n  currentNode = currentParent;\n  currentParent = currentParent.parentNode;\n};\n\n\n/**\n * Makes sure that the current node is an Element with a matching tagName and\n * key.\n *\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpen = function(tag, key) {\n  nextNode();\n  alignWithDOM(tag, key);\n  enterNode();\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * Closes the currently open Element, removing any unvisited children if\n * necessary.\n *\n * @return {!Element} The corresponding Element.\n */\nconst elementClose = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    setInSkip(false);\n  }\n\n  exitNode();\n  return /** @type {!Element} */(currentNode);\n};\n\n\n/**\n * Makes sure the current node is a Text node and creates a Text node if it is\n * not.\n *\n * @return {!Text} The corresponding Text Node.\n */\nconst text = function() {\n  nextNode();\n  alignWithDOM('#text', null);\n  return /** @type {!Text} */(currentNode);\n};\n\n\n/**\n * Gets the current Element being patched.\n * @return {!Element}\n */\nconst currentElement = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentElement', context);\n    assertNotInAttributes('currentElement');\n  }\n  return /** @type {!Element} */(currentParent);\n};\n\n\n/**\n * @return {Node} The Node that will be evaluated for the next instruction.\n */\nconst currentPointer = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInPatch('currentPointer', context);\n    assertNotInAttributes('currentPointer');\n  }\n  return getNextNode();\n};\n\n\n/**\n * Skips the children in a subtree, allowing an Element to be closed without\n * clearing out the children.\n */\nconst skip = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNoChildrenDeclaredYet('skip', currentNode);\n    setInSkip(true);\n  }\n  currentNode = currentParent.lastChild;\n};\n\n\n/**\n * Skips the next Node to be patched, moving the pointer forward to the next\n * sibling of the current pointer.\n */\nconst skipNode = nextNode;\n\n\n/** */\nexport {\n  elementOpen,\n  elementClose,\n  text,\n  patchInner,\n  patchOuter,\n  currentElement,\n  currentPointer,\n  skip,\n  skipNode\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @const */\nconst symbols = {\n  default: '__default'\n};\n\n/** */\nexport {\n  symbols\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getData } from './node_data';\nimport { symbols } from './symbols';\nimport {\n  createMap,\n  has\n} from './util';\n\n\n/**\n * @param {string} name\n * @return {string|undefined} The namespace to use for the attribute.\n */\nconst getNamespace = function(name) {\n  if (name.lastIndexOf('xml:', 0) === 0) {\n    return 'http://www.w3.org/XML/1998/namespace';\n  }\n\n  if (name.lastIndexOf('xlink:', 0) === 0) {\n    return 'http://www.w3.org/1999/xlink';\n  }\n};\n\n\n/**\n * Applies an attribute or property to a given Element. If the value is null\n * or undefined, it is removed from the Element. Otherwise, the value is set\n * as an attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {?(boolean|number|string)=} value The attribute's value.\n */\nconst applyAttr = function(el, name, value) {\n  if (value == null) {\n    el.removeAttribute(name);\n  } else {\n    const attrNS = getNamespace(name);\n    if (attrNS) {\n      el.setAttributeNS(attrNS, name, value);\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n};\n\n/**\n * Applies a property to a given Element.\n * @param {!Element} el\n * @param {string} name The property's name.\n * @param {*} value The property's value.\n */\nconst applyProp = function(el, name, value) {\n  el[name] = value;\n};\n\n\n/**\n * Applies a value to a style declaration. Supports CSS custom properties by\n * setting properties containing a dash using CSSStyleDeclaration.setProperty.\n * @param {CSSStyleDeclaration} style\n * @param {!string} prop\n * @param {*} value\n */\nconst setStyleValue = function(style, prop, value) {\n  if (prop.indexOf('-') >= 0) {\n    style.setProperty(prop, /** @type {string} */(value));\n  } else {\n    style[prop] = value;\n  }\n};\n\n\n/**\n * Applies a style to an Element. No vendor prefix expansion is done for\n * property names/values.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} style The style to set. Either a string of css or an object\n *     containing property-value pairs.\n */\nconst applyStyle = function(el, name, style) {\n  if (typeof style === 'string') {\n    el.style.cssText = style;\n  } else {\n    el.style.cssText = '';\n    const elStyle = el.style;\n    const obj = /** @type {!Object<string,string>} */(style);\n\n    for (const prop in obj) {\n      if (has(obj, prop)) {\n        setStyleValue(elStyle, prop, obj[prop]);\n      }\n    }\n  }\n};\n\n\n/**\n * Updates a single attribute on an Element.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value. If the value is an object or\n *     function it is set on the Element, otherwise, it is set as an HTML\n *     attribute.\n */\nconst applyAttributeTyped = function(el, name, value) {\n  const type = typeof value;\n\n  if (type === 'object' || type === 'function') {\n    applyProp(el, name, value);\n  } else {\n    applyAttr(el, name, /** @type {?(boolean|number|string)} */(value));\n  }\n};\n\n\n/**\n * Calls the appropriate attribute mutator for this attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value.\n */\nconst updateAttribute = function(el, name, value) {\n  const data = getData(el);\n  const attrs = data.attrs;\n\n  if (attrs[name] === value) {\n    return;\n  }\n\n  const mutator = attributes[name] || attributes[symbols.default];\n  mutator(el, name, value);\n\n  attrs[name] = value;\n};\n\n\n/**\n * A publicly mutable object to provide custom mutators for attributes.\n * @const {!Object<string, function(!Element, string, *)>}\n */\nconst attributes = createMap();\n\n// Special generic mutator that's called for any attribute that does not\n// have a specific mutator.\nattributes[symbols.default] = applyAttributeTyped;\n\nattributes['style'] = applyStyle;\n\n\n/** */\nexport {\n  updateAttribute,\n  applyProp,\n  applyAttr,\n  attributes\n};\n","/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  elementOpen as coreElementOpen,\n  elementClose as coreElementClose,\n  text as coreText\n} from './core';\nimport { updateAttribute } from './attributes';\nimport { getData } from './node_data';\nimport {\n  assertNotInAttributes,\n  assertNotInSkip,\n  assertInAttributes,\n  assertCloseMatchesOpenTag,\n  setInAttributes\n} from './assertions';\n\n\n/**\n * The offset in the virtual element declaration where the attributes are\n * specified.\n * @const\n */\nconst ATTRIBUTES_OFFSET = 3;\n\n\n/**\n * Builds an array of arguments for use with elementOpenStart, attr and\n * elementOpenEnd.\n * @const {Array<*>}\n */\nconst argsBuilder = [];\n\n\n/**\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args, Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpen = function(tag, key, statics, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpen');\n    assertNotInSkip('elementOpen');\n  }\n\n  const node = coreElementOpen(tag, key);\n  const data = getData(node);\n\n  if (!data.staticsApplied) {\n    if (statics) {\n      for (let i = 0; i < statics.length; i += 2) {\n        const name = /** @type {string} */(statics[i]);\n        const value = statics[i + 1];\n        updateAttribute(node, name, value);\n      }\n    }\n    // Down the road, we may want to keep track of the statics array to use it\n    // as an additional signal about whether a node matches or not. For now,\n    // just use a marker so that we do not reapply statics.\n    data.staticsApplied = true;\n  }\n\n  /*\n   * Checks to see if one or more attributes have changed for a given Element.\n   * When no attributes have changed, this is much faster than checking each\n   * individual argument. When attributes have changed, the overhead of this is\n   * minimal.\n   */\n  const attrsArr = data.attrsArr;\n  const newAttrs = data.newAttrs;\n  const isNew = !attrsArr.length;\n  let i = ATTRIBUTES_OFFSET;\n  let j = 0;\n\n  for (; i < arguments.length; i += 2, j += 2) {\n    const attr = arguments[i];\n    if (isNew) {\n      attrsArr[j] = attr;\n      newAttrs[attr] = undefined;\n    } else if (attrsArr[j] !== attr) {\n      break;\n    }\n\n    const value = arguments[i + 1];\n    if (isNew || attrsArr[j + 1] !== value) {\n      attrsArr[j + 1] = value;\n      updateAttribute(node, attr, value);\n    }\n  }\n\n  if (i < arguments.length || j < attrsArr.length) {\n    for (; i < arguments.length; i += 1, j += 1) {\n      attrsArr[j] = arguments[i];\n    }\n\n    if (j < attrsArr.length) {\n      attrsArr.length = j;\n    }\n\n    /*\n     * Actually perform the attribute update.\n     */\n    for (i = 0; i < attrsArr.length; i += 2) {\n      const name = /** @type {string} */(attrsArr[i]);\n      const value = attrsArr[i + 1];\n      newAttrs[name] = value;\n    }\n\n    for (const attr in newAttrs) {\n      updateAttribute(node, attr, newAttrs[attr]);\n      newAttrs[attr] = undefined;\n    }\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document. This\n * corresponds to an opening tag and a elementClose tag is required. This is\n * like elementOpen, but the attributes are defined using the attr function\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\n * to attr, then a call to elementOpenEnd.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n */\nconst elementOpenStart = function(tag, key, statics) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementOpenStart');\n    setInAttributes(true);\n  }\n\n  argsBuilder[0] = tag;\n  argsBuilder[1] = key;\n  argsBuilder[2] = statics;\n};\n\n\n/***\n * Defines a virtual attribute at this point of the DOM. This is only valid\n * when called between elementOpenStart and elementOpenEnd.\n *\n * @param {string} name\n * @param {*} value\n */\nconst attr = function(name, value) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('attr');\n  }\n\n  argsBuilder.push(name);\n  argsBuilder.push(value);\n};\n\n\n/**\n * Closes an open tag started with elementOpenStart.\n * @return {!Element} The corresponding Element.\n */\nconst elementOpenEnd = function() {\n  if (process.env.NODE_ENV !== 'production') {\n    assertInAttributes('elementOpenEnd');\n    setInAttributes(false);\n  }\n\n  const node = elementOpen.apply(null, argsBuilder);\n  argsBuilder.length = 0;\n  return node;\n};\n\n\n/**\n * Closes an open virtual Element.\n *\n * @param {string} tag The element's tag.\n * @return {!Element} The corresponding Element.\n */\nconst elementClose = function(tag) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('elementClose');\n  }\n\n  const node = coreElementClose();\n\n  if (process.env.NODE_ENV !== 'production') {\n    assertCloseMatchesOpenTag(getData(node).nodeName, tag);\n  }\n\n  return node;\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document that has\n * no children.\n * @param {string} tag The element's tag.\n * @param {?string=} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>=} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Element} The corresponding Element.\n */\nconst elementVoid = function(tag, key, statics, var_args) {\n  elementOpen.apply(null, arguments);\n  return elementClose(tag);\n};\n\n\n/**\n * Declares a virtual Text at this point in the document.\n *\n * @param {string|number|boolean} value The value of the Text.\n * @param {...(function((string|number|boolean)):string)} var_args\n *     Functions to format the value which are called only when the value has\n *     changed.\n * @return {!Text} The corresponding text node.\n */\nconst text = function(value, var_args) {\n  if (process.env.NODE_ENV !== 'production') {\n    assertNotInAttributes('text');\n    assertNotInSkip('text');\n  }\n\n  const node = coreText();\n  const data = getData(node);\n\n  if (data.text !== value) {\n    data.text = /** @type {string} */(value);\n\n    let formatted = value;\n    for (let i = 1; i < arguments.length; i += 1) {\n      /*\n       * Call the formatter function directly to prevent leaking arguments.\n       * https://github.com/google/incremental-dom/pull/204#issuecomment-178223574\n       */\n      const fn = arguments[i];\n      formatted = fn(formatted);\n    }\n\n    node.data = formatted;\n  }\n\n  return node;\n};\n\n\n/** */\nexport {\n  elementOpenStart,\n  elementOpenEnd,\n  elementOpen,\n  elementVoid,\n  elementClose,\n  text,\n  attr\n};\n"],"names":["elementOpen","elementClose","text"],"mappings":"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","sourceRoot":"/source/"}